#
# @file  choosetemplate.m
# @brief Apply k-means clustering to a set of images and returns the centroids of clusters
#
# Copyright (c) 2011-2014 University of Pennsylvania. All rights reserved.<br />
# See http://www.cbica.upenn.edu/sbia/software/license.html or COPYING file.
#
# Contact: SBIA Group <sbia-software at uphs.upenn.edu>
#



#Usage 
# ############################################ #
# choosetemplate.py 5 /Path/To/Input/List.txt /Path/To/Destination/
################################################
# will choose 5 templates from the nifti images listed in 'List.txt' file
#The list file must have full paths to the files or atleast paths relative to the executable





from sklearn.cluster import KMeans
from sklearn import datasets
import nibabel as nib
import numpy as np
import sys

print(str(sys.argv))

NumClust=str(sys.argv[1])
InputList=str(sys.argv[2])
DestDir=str(sys.argv[3])
MT=str(sys.argv[4])

### Printing input arguments
print('\n\n')
print('Number of clusters :', NumClust)
print('Subject Input List :', InputList)
print('Destination Folder :', DestDir)
print('Number of Threads  :', MT)
print('\n\n')

### Reading input file list
f=open(InputList)
lines = f.readlines()
ctr=0

### Reading input images, getting their dimensions, vectorizing and downsampling them
for line in lines:
	ctr=ctr+1
	print(line)
	# Read image
	img = nib.load(str.rstrip(line))
	a=img.get_data()
	# Get dimensions
	print(a.shape)
	# Vectorize
	b=np.reshape(a,-1)
	# Downsampling
	b=b[1:-1:4]
#	print b.shape
	# Stacking all vectors into a matrix
	if ctr==1:
		c=b
		print(c.shape)
	else:
		c=np.vstack((c,b))
		print(c.shape)
  

### Run KMeans
# km = KMeans(n_clusters=int(NumClust), init='random', max_iter=100, n_init=100,verbose=0,n_jobs=int(MT))
km = KMeans(n_clusters=int(NumClust), init='random', max_iter=100, n_init=100,verbose=0)
km.fit(c)
km.labels_
ctr=0

### Find cluster centers
center_list=list()
for y in range(km.n_clusters):
	print('\n')
	print('Cluster : ', y)
	c_dist=float("inf")
	cluster_list=list()
	print('------------')
	for ctr in range(len(lines)):
		if km.labels_[ctr]==y:
			pre_c_dist=c_dist
			c_dist=min(c_dist,np.linalg.norm(c[ctr,:]-km.cluster_centers_[y]))
			if c_dist!=pre_c_dist:
				center=lines[ctr]
				cluster_list.append(lines[ctr])
	print(cluster_list)     
	cx=open(DestDir+"list"+str(y)+".txt","w")
	for im in cluster_list:
		cx.write(im)
	cx.close() 
	center_list.append(center)

print('\n')
print('Cluster Centers')
print('---------------')
print(center_list)
print('\n')

f = open(DestDir+"templatelist.txt", "w")
for centers in center_list:
	f.write(centers)
f.close()
