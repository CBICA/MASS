#!/bin/bash

. @BASH_LIBRARY_DIR@/mass-functions.sh || { echo "Failed to source MASS functions!" 1>&2; exit 1; }
## try to source the scheduler setting file. if scheduler is not defined, @SCHEDULER_SETTING_FILE@ would be undefined, the sourcing would fail and isSchedulerAvailable would be undefined.
. @BASH_LIBRARY_DIR@/@SCHEDULER_SETTING_FILE@ 2>/dev/null && { isSchedulerAvailable=1; }

################################################ VERSION INFO ################################################
# $Id: mass.sh 163 2013-09-06 01:42:07Z hsiehm@UPHS.PENNHEALTH.PRV $
#
version()
{
	# Display the version number and date of modification extracted from
	# the Id variable.
	SVNversion="$Id: mass.sh 163 2013-09-06 01:42:07Z hsiehm@UPHS.PENNHEALTH.PRV $"
	Auth="Jimit Doshi"
	ver="$Rev: 163 $"
	mod="$LastChangedDate: 2013-09-05 21:42:07 -0400 (Thu, 05 Sep 2013) $"
	echo -e "Author			: $Auth"
	echo -e "Revision		$ver"
	echo -e "Last Modification	$mod"
#	echo -e "$0 version \c"
#	echo $SVNversion|cut -f3,4,5 -d" "
	exit 5
}

################################################ FUNCTIONS ################################################

help()
{
cat <<HELP

This script does the following:
	
	- As the name suggests, it applies a Multi Atlas Skull-Stripping algorithm to 
	  an image by using a set of templates for registration. 
	- If the templates are skull-stripped and cerebellum removed, so will the output. 
	- It also outputs a Jacobian Rank Mask which is a weighted rank map of the brain region with 
	  higher values indicating higher probability of a voxel being included as a brain voxel. 
	  It becomes helpful in post-processing (using the mass-thresholdJacobian script) and customizing 
	  the threshold for a particularly difficult image.
	
##############################################
USAGE :	$0 [OPTIONS]
OPTIONS:

REQD	 
	 -in	  < file  >	absolute path to the input file to be registered

OPTIONAL	 
Data:	 -ref	  < path  >	absolute path to the template directory 
				(default: a set of 15 images included in the package)
	 -mask    < pattern >	Prefix of the output brain mask (without the extension or the path)
				(default: input_brainmask)
	 -cbq	  < pattern >	Prefix of the output skull-stripped image (without the extension or the path)
				(default: input_brain)
	 -dest	  < path  >	absolute path to the destination where the results are to be stored
				(default: same as input)
	 -noJacRank		delete the Jacobian Ranked brain mask (default: keep)
	 -noCere		flag indicating that templates without cerebellum should be used 
				(default: use cerebellum)
	 -regs	  < int   >	No. of templates to be used for registrations (default: 6)
	 			default -ref option, 		2 <= regs <= 15
	 			user specified -ref option,	2 <= regs < inf
	 -regWt	  < float >	Regularization for the DRAMMS registration. 0 < \$regWt < 1.0 (default: 0.05)
	 -agg	  < float >	Aggresiveness of the skull-stripping, 0 < \$agg < 100 (default: 50)
	 -smooth  < int   >	Gaussian smoothing kernel size, in mm (default: 0mm)
	 -kernel  < int   >	Spherical dilation kernel size, in mm (default: 2mm)
 	 -int	  < int   >	keep intermediate files. 
				0 - delete all intermediate files (default)
				1 - Keep only the important files. 
				2 - Keep all intermediate files 
	

Cluster: -NOQ			Flag indicating that the queuing cluster is not to be used
	 -MT	  < int   >	Flag indicating that the Registration jobs could be multi-threaded 
				(becomes meaningful only when used with -NOQ)
				It will run the number of instances spcified by the -MT option. 
				Use this option depending on how much load you want to put on the 
				CPU you are running the job on
	 -mem	  < int   >	Memory to be requested for each registration job submitted to the cluster
				The memory requested for the final skullstripping job will be half of this
				(default: 16GB)
	 -log	  < path  >	absolute path to the directory to store the LogFiles 
				(default: \$HOME/mass_log_files/)
	 -hold	  < jid   >	Hold queue for jobs, e.g.: 1794683. (default: no hold queue)
	 -p	  < int   >	Priority for jobs submitted to the computing cluster, 
				-1023 < priority < 0 (no default)
	 -delay	  < secs  >	Delay between submission of jobs to the cluster, in seconds. 
				For minimization of disk I/O load (default: 5)
	
Misc:	 -v			Verbose Output for debugging purposes (default: OFF)
	 -V			Version Information
	 -h         		this help page

Examples:
	mass -in /path/to/source/sourceimage.hdr
		Remove the skull and other extra-cranial matter using 6 generic templates

	mass -in /Path/To/Source/Directory/Input_n3.nii.gz -dest /Path/To/Destination/Directory/ -noCere
		To use the templates without the cerebellum
		
	mass -in /Path/To/Source/Directory/Input_n3.nii.gz -dest /Path/To/Destination/Directory/ 
	     -ref /Path/To/User/Defined/Templates/
		To use a user defined set of templates

	mass -in /Path/To/Source/Directory/Input_n3.nii.gz -dest /Path/To/Destination/Directory/ -NOQ
		To remove the skull from the input image using the default options. However, do 
		not use the computing cluster but run the mass-registrations jobs serially

	mass -in /Path/To/Source/Directory/Input_n3.nii.gz -dest /Path/To/Destination/Directory/ -NOQ -MT 6
		To remove the skull from the input image using the default options, but without
		the computing cluster. Additionally, use 6 CPU cores during mass-registrations
		to speed up the process

	mass -in /Path/To/Source/Directory/Input_n3.nii.gz -dest /Path/To/Destination/Directory/ -hold 1794683
		To remove the skull from the input image using the default options, but wait for the particular 
		job (for e.g., a bias correction job) to be finished before executing the mass jobs . 
		This option is valid only if you have a computing cluster.

ERROR: Not enough arguments!!
##############################################

HELP
exit 1
}

helpshort()
{
cat <<HELP

This script does the following:
	
	- As the name suggests, it applies a Multi Atlas Skull-Stripping algorithm to 
	  an image by using a set of templates for registration. 
	
##############################################
USAGE :	$0 [OPTIONS]
OPTIONS:

Reqd:	-in	   < file  >	absolute path to the input file to be registered
	 
Data:	-ref	   < path  >	absolute path to the template directory
				(default: a set of 15 images included in the package)
	-dest	   < path  >	absolute path to the destination where the results are to be stored
				(default: same as input)
	-regs	   < int   >	No. of templates to be used for registrations (default: 6)
	-noCere			flag indicating that templates without cerebellum should be used 
				(default: use cerebellum)

Misc:	--help			a detailed version of the options and arguments

ERROR: Not enough arguments!!
##############################################

HELP
exit 1
}

cleanUpandExit()
{
	echo -e ":o:o:o:o:o Aborting Operations .... \n\n"
	
	if [ -n "$holdqueue" ]
	then
		echo -e "Deleting submitted cluster jobs .... "
		
		totalArgs=`echo $holdqueue | wc -w`
		for (( i=2;i<=${totalArgs};i=i+2 ))
		do
			$setDeleteJob `echo $holdqueue | cut -d' ' -f${i}`
		done
	elif [ "$NOQ" == "1" ]
	then
		BGjobs=`jobs -p`
		if [ -n "$BGjobs" ]
		then
			kill -s SIGINT $BGjobs
		fi

	fi
	
	executionTime
	
	exit 1
}

parse()
{
	while [ -n "$1" ]; do
		case $1 in
			-h) 
				helpshort;
				shift 1;;			# help is called
			--help)
				help;
				shift 1;;
		     	-in) 
				input=$2;
				
				temp=`FileAtt $input`				
				InExt=`echo $temp | awk '{ print $1 }'`
				InbName=`echo $temp | awk '{ print $2 }'`
				InDir=`echo $temp | awk '{ print $3 }'`
				
				input=${InDir}/${InbName}.${InExt}
				
				shift 2;;			
			-ref) 
				ref=`checkPath $2`;
				shift 2;;			
			-dest) 
				dest=`checkPath $2`;
				shift 2;;			
			-log) 
				log=`checkPath $2`;
				shift 2;;			
			-tmp) 
				tmpDirToUse=`checkPath $2`;
				shift 2;;			
			-regs) 
				regs=$2;
				shift 2;;			
			-regWt) 
				regWt=$2;
				shift 2;;			
			-agg) 
				agg=$2;
				shift 2;;			
			-int) 
				int=$2;
				shift 2;;			
			-noJacRank) 
				jacRank=1;
				shift 1;;			
			-noCere) 
				Cere=0;
				shift 1;;			
			-smooth) 
				smooth=$2;
				shift 2;;			
			-kernel) 
				kernel=$2;
				shift 2;;			
			-delay) 
				delay=$2;
				shift 2;;			
			-p) 
				priority=$2;
				shift 2;;			
			-v) 
				verbose=1;
				shift 1;;			
			-hold) 
				hold=$2;
				shift 2;;			
			-NOQ) 
				NOQ=1;
				shift 1;;			
			-MT) 
				MT=$2;
				shift 2;;			
			-V) 
				version;
				shift 1;;			
			-mask) 
				mask=$2;
				shift 2;;			
			-cbq) 
				cbq=$2;
				shift 2;;			
			-mem) 
				mem=$2;
				halfmem=$(( (mem+1)/2 ))
				shift 2;;			
			-*) 
				echo "ERROR: no such option $1";
				helpshort;;
			 *) 
				break;;
		esac
	done
}

################################################ END OF FUNCTIONS ################################################

################################################ MAIN BODY ################################################

if [ $# -lt 1 ]
then
	helpshort
fi

### Timestamps
startTime=`date +%F-%H:%M:%S`
startTimeStamp=`date +%s`

### Default parameters
scripts=@LIBEXEC_DIR@/
log=${HOME}/mass_log_files/
agg=50
regs=6
regWt=0.05
int=0
jacRank=1
Cere=1
verbose=0
smooth=0
kernel=2
priority=""
holdqueue=""
hold=""
delay=5
mem=16
halfmem=8
MT=0
PID=$$
BGjobs=""
cpu_count=`cat /proc/cpuinfo | grep processor | wc -l`

# Deciding the default value of NOQ based on the availability of the server
if [ "$isSchedulerAvailable" == "1" ]
then
	NOQ=0
else
	NOQ=1
fi

### Specifying the trap signal
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGHUP signal'" SIGHUP 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGINT signal'" SIGINT 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGTERM signal'" SIGTERM 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGKILL signal'" SIGKILL

### Reading the arguments
parse $*

### Checking for templates directory
if [ -z "$ref" ]
then
	if [ "$Cere" == "1" ]
	then
		ref=@DATA_DIR@/Templates/WithCerebellum/
	elif [ "$Cere" == "0" ]
	then
		ref=@DATA_DIR@/Templates/WithoutCerebellum/
	fi
	
	### Checking for the maximum number of templates
	if [ ${regs} -gt 15 ]
	then 
		echoV "For the default, generic templates specified by the -ref option, the maximum number of templates you can use is *15*.
			\n You provided \"-regs $regs\"" 1
		exit 1
	fi
fi

### Checking for the number of templates
if [ ${regs} -lt 2 ]
then
	echoV "You need atleast 2 templates to run this algorithm. You provided \"-regs $regs\"" 1
	exit 1
fi

### Checking if all Input files exist
# Check for input file only if the hold option is not specified
if [ -z "$hold" ]
then
	checkFile $input
fi

for (( i=1;i<=${regs};i++ ))
do
	checkFile ${ref}Template${i}.nii.gz
	checkFile ${ref}Template${i}_str_cbq.nii.gz
done

### Checking if the number of threads requested is feasible
if [ "$NOQ" == "1" ] && [ $MT -gt $cpu_count ]
then
	echoV "There are only $cpu_count processor(s) available on this machine but you requested \"-MT $MT\" to run this algorithm. 
		\n To avoid overloading your machine/server, please run this algorithm with $cpu_count processor(s) or less ..." 1
	exit 1
fi

### Checking if the log output directory exists. If not, create it
if [ ! -d $log ]
then
	mkdirV $log
fi

### Checking for destination directory
if [ -z "$dest" ]
then
	dest=`dirname $input`/
fi

### Making sure the output filenames are set
if [ -z "$mask" ]
then
	mask=${InbName}_brainmask
fi

if [ -z "$cbq" ]
then
	cbq=${InbName}_brain
fi

checkDependency	3dcalc
checkDependency	3dmerge
checkDependency	nifti1_test
checkDependency	3dMean
checkDependency	3dTsort
checkDependency	3dBrickStat
checkDependency	3dclust
checkDependency	3dresample

checkDependency	fslmerge
checkDependency	fslsplit
	
### Submitting registration jobs
# Get command to submit jobs to scheduler
if [ "$NOQ" == 0 ]
then
	QSUB=`setSubmitCMD ${mem} ${hold} || checkExitCode 1 '\nJob submission command not set. Exiting MASS!'`
fi

if [ -n "$tmpDirToUse" ]
then
	CMD="${scripts}mass-registrations -tmp $tmpDirToUse"
else
	CMD="${scripts}mass-registrations"
fi

if [ "$NOQ" == 0 ]
then
	for (( i=1;i<=${regs};i++ ))	
	do
		if [ ! -f ${dest}${InbName}-Template${i}_mask.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_mask_InSpace.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_affine_warp_jacobian.nii.gz ]
		then
			jid=$(${QSUB} \
			 ${CMD} \
			 -in ${input} \
			 -ref ${ref}Template${i}.nii.gz \
			 -str ${ref}Template${i}_str_cbq.nii.gz \
			 -int ${int} \
			 -dest ${dest} \
			 -reg $regWt \
			 -v $verbose)
			
			### Append all job ids to this string
			holdqueue="${holdqueue} ${jid}"

		 	### Sleep for a little while and then submit the next job to avoid overloading disk I/O
			sleep ${delay}s
		fi
	done
	
elif [ "$NOQ" == 1 ] && [ $MT -le 1 ]
then
	for (( i=1;i<=${regs};i++ ))
	do
		if [ ! -f ${dest}${InbName}-Template${i}_mask.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_mask_InSpace.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_affine_warp_jacobian.nii.gz ]
		then
			echo -e "\n\n--------> RUNNING REGISTRATION WITH TEMPLATE${i} at `date`
			LOGFILE: ${log}mass-registrations-Template${i}-${PID}.log "
		
			${CMD} \
			 -in ${input} \
			 -ref ${ref}Template${i}.nii.gz \
			 -str ${ref}Template${i}_str_cbq.nii.gz \
			 -int ${int} \
			 -dest ${dest} \
			 -reg $regWt \
			 -v $verbose > ${log}mass-registrations-Template${i}-${PID}.log 2>&1
		fi
	done
	
elif [ "$NOQ" == 1 ] && [ $MT -gt 1 ]
then
	for (( i=1;i<=${regs};i++ ))
	do
		if [ ! -f ${dest}${InbName}-Template${i}_mask.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_mask_InSpace.nii.gz ] || [ ! -f ${dest}${InbName}-Template${i}_affine_warp_jacobian.nii.gz ]
		then		
			### Re-launch any jobs that might have been stopped by the OS
			stoppedJobs=`jobs -ps | wc -l`
			while [ $stoppedJobs -gt 0 ]
			do
				bg
				stoppedJobs=`jobs -ps | wc -l`
				sleep 2m
			done
		
			### Allows for control over the number of jobs running in the background
			BGjobsNum=`jobs -p | wc -l`
			while [ $BGjobsNum -ge $MT ]
			do
				sleep 2m
				BGjobsNum=`jobs -p | wc -l`
			done

			echo -e "\n\n--------> RUNNING REGISTRATION WITH TEMPLATE${i} at `date` 
			LOGFILE: ${log}mass-registrations-Template${i}-${PID}.log "

			${CMD} \
			 -in ${input} \
			 -ref ${ref}Template${i}.nii.gz \
			 -str ${ref}Template${i}_str_cbq.nii.gz \
			 -int ${int} \
			 -dest ${dest} \
			 -reg $regWt \
			 -v $verbose > ${log}mass-registrations-Template${i}-${PID}.log 2>&1 &
			 
			bgJID=$! 
	 		if [ -z "${BGjobs}" ]
			then
				BGjobs="$bgJID"
			else
				BGjobs="${BGjobs} $bgJID"
			fi


		 	### Sleep for a little while and then submit the next job to avoid overloading disk I/O
			sleep `echo "scale=0; ${delay} * 2 * ${MT}" | bc`s
		fi

	done

	wait $BGjobs
fi

BGjobs=""

### Submitting post-processing jobs
# CBQ mask

if [ -n "$tmpDirToUse" ]
then
	CMD="${scripts}mass-skullstripping -tmp $tmpDirToUse"
else
	CMD="${scripts}mass-skullstripping"
fi

if [ "$NOQ" == 0 ]
then
	QSUB=`setSubmitCMD ${halfmem} ${holdqueue}`
	
	$QSUB \
	 ${CMD} \
	 -dest ${dest} \
	 -in ${input} \
	 -int ${int} \
	 -jacRank ${jacRank} \
	 -agg ${agg} \
	 -regs ${regs} \
	 -smooth ${smooth} \
	 -kernel ${kernel} \
	 -mask $mask \
	 -cbq $cbq \
	 -v $verbose;

elif [ "$NOQ" == 1 ] && [ $MT -le 1 ]
then
	echo -e "\n\n--------> GENERATING BRAIN MASK at `date`
	LOGFILE: ${log}mass-skullstripping-${PID}.log "
	
	${CMD} \
	 -dest ${dest} \
	 -in ${input} \
	 -int ${int} \
	 -jacRank ${jacRank} \
	 -agg ${agg} \
	 -regs ${regs} \
	 -smooth ${smooth} \
	 -kernel ${kernel} \
	 -mask $mask \
	 -cbq $cbq \
	 -v $verbose > ${log}mass-skullstripping-${PID}.log 2>&1
	
	### Execution Time 
	executionTime
	
elif [ "$NOQ" == 1 ] && [ $MT -gt 1 ]
then
	echo -e "\n\n--------> GENERATING BRAIN MASK at `date`
	LOGFILE: ${log}mass-skullstripping-${PID}.log "
	
	${CMD} \
	 -dest ${dest} \
	 -in ${input} \
	 -int ${int} \
	 -jacRank ${jacRank} \
	 -agg ${agg} \
	 -regs ${regs} \
	 -smooth ${smooth} \
	 -kernel ${kernel} \
	 -mask $mask \
	 -cbq $cbq \
	 -v $verbose > ${log}mass-skullstripping-${PID}.log 2>&1 &


	bgJID=$! 
	if [ -z "${BGjobs}" ]
	then
		BGjobs="$bgJID"
	else
		BGjobs="${BGjobs} $bgJID"
	fi

	wait $BGjobs

	### Execution Time 
	executionTime
fi

################################################ END ################################################
