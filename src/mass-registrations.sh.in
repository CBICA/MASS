#!/bin/bash

. @BASH_LIBRARY_DIR@/mass-functions.sh || { echo "Failed to source MASS functions!" 1>&2; exit 1; }

################################################ VERSION INFO ################################################
# $Id: Registrations.sh 170 2013-09-20 14:44:15Z hsiehm@UPHS.PENNHEALTH.PRV $
#
version()
{
	# Display the version number and date of modification extracted from
	# the Id variable.
	SVNversion="$Id: Registrations.sh 170 2013-09-20 14:44:15Z hsiehm@UPHS.PENNHEALTH.PRV $"
	Auth="Jimit Doshi"
	ver="$Rev: 170 $"
	mod="$LastChangedDate: 2013-09-20 10:44:15 -0400 (Fri, 20 Sep 2013) $"
	echo -e "Author			: $Auth"
	echo -e "Revision		$ver"
	echo -e "Last Modification	$mod"
#	echo -e "$0 version \c"
#	echo $SVNversion|cut -f3,4,5 -d" "
	exit 5
}

################################################ FUNCTIONS ################################################

help()
{
cat <<HELP

This script does the following:

	It non-linearly registers (using dramms) the template image to an input image 
	and creates the jacobian determinant of the deformation

##############################################
USAGE :	$0 [OPTIONS]
OPTIONS:

Reqd:	-in	< file >	absolute path to the input file to be registered
	-ref	< file >	absolute path to the reference file to be used for registration
	-str	< file >	absolute path to the reference, skull-stripped file to be used for registration
	 
Opt:	-h         		this help page
	-dest	< path >	absolute path to the destination where the results are to be stored (default: same as input)
	-int	< int >		keep intermediate files (default: 0 - delete)
	-v	< 0/1 >		verbose output (default: 0 - no output)
	-reg	< float >	regularisation weight for the DRAMMS registration. 0 < \$reg < 1.0 (default: 0.05)
	-V			Version Information

ERROR: Not enough arguments!!
##############################################

DEPENDENCIES:
	dramms			: `which dramms`
	3dcalc			: `which 3dcalc`
	nifti1_test		: `which nifti1_test`

HELP
exit 1
}

cleanUpandExit()
{
	echo -e ":o:o:o:o:o Aborting Operations .... \n\n"
	
	if [ -d "$TMP" ]
	then
		rm -rfv ${TMP}
	fi
	
	executionTime
	exit 1
}

parse()
{
	while [ -n "$1" ]; do
		case $1 in
			-h) 
				help;
				shift 1;;			# help is called
		     	-in) 
				input=$2;
				
				checkFile $input
				temp=`FileAtt $input`				
				InExt=`echo $temp | awk '{ print $1 }'`
				InbName=`echo $temp | awk '{ print $2 }'`
				InDir=`echo $temp | awk '{ print $3 }'`
				
				input=${InDir}/${InbName}.${InExt}
				
				shift 2;;			# SubID is set
			-ref) 
				ref=$2;
				
				checkFile $ref
				temp=`FileAtt $ref`				
				RefExt=`echo $temp | awk '{ print $1 }'`
				RefbName=`echo $temp | awk '{ print $2 }'`
				RefDir=`echo $temp | awk '{ print $3 }'`
				
				ref=${RefDir}/${RefbName}.${RefExt}

				shift 2;;			# source path is set
			-str) 
				str=$2;
				
				checkFile $str
				temp=`FileAtt $str`				
				StrExt=`echo $temp | awk '{ print $1 }'`
				StrbName=`echo $temp | awk '{ print $2 }'`
				StrDir=`echo $temp | awk '{ print $3 }'`
				
				str=${StrDir}/${StrbName}.${StrExt}

				shift 2;;			# source path is set
			-dest) 
				dest=`checkPath $2`;
				shift 2;;			# source path is set
			-tmp) 
				tmpDirToUse=`checkPath $2`;
				shift 2;;			# source path is set
			-int) 
				int=$2;
				shift 2;;			# source path is set
			-reg) 
				reg=$2;
				shift 2;;			# source path is set
			-v) 
				verbose=$2;
				shift 2;;			# source path is set
			-V) 
				version;
				shift 1;;			# source path is set
			-*) 
				echo "ERROR: no such option $1";
				help;;
			 *) 
				break;;
		esac
	done
}

import()
{
	ext=$1
	inFile=$2
	outFile=$3
	
	if [ "${ext}" == "nii.gz" ]
	then
		echoV "nifti1_test -n2 ${inFile} ${outFile}"
		nifti1_test -n2 ${inFile} ${outFile}
	elif [ "${ext}" == "nii" ]
	then
		echoV "nifti1_test -n2 ${inFile} ${outFile}"
		nifti1_test -n2 ${inFile} ${outFile}
	elif [ "${ext}" == "hdr" ]
	then
		echoV "nifti1_test -n2 ${inFile%.hdr}.img ${outFile}"
		nifti1_test -n2 ${inFile%.hdr}.img ${outFile}
	elif [ "${ext}" == "img" ]
	then
		echoV "nifti1_test -n2 ${inFile} ${outFile}"
		nifti1_test -n2 ${inFile} ${outFile}
	fi	
}

################################################ END OF FUNCTIONS ################################################

################################################ MAIN BODY ################################################

if [ $# -lt 1 ]; then
	help
fi

### Timestamps
startTime=`date +%F-%H:%M:%S`
startTimeStamp=`date +%s`

echo -e "\nRunning commands on		: `hostname`"
echo -e "Start time			: ${startTime}\n"

### Default parameters
int=0
verbose=0
vnmask=0
LinearRegFlag=0
reg=0.05
FSLOUTPUTTYPE=NIFTI_GZ; export $FSLOUTPUTTYPE


### Specifying the trap signal
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGHUP signal'" SIGHUP 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGINT signal'" SIGINT 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGTERM signal'" SIGTERM 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGKILL signal'" SIGKILL

### Reading the arguments
echo -e "Parsing arguments		: $*"
parse $*

### Checking parameter validity
# Checking if destination was provided, if not, same as input file
if [ -z "$dest" ]
then
	dest=`dirname $input`
fi

### Check if all dependenices are satisfied
checkDependency	3dcalc
checkDependency	nifti1_test
checkDependency dramms

### Forming FileNames
PID=$$

### Creating temporary directory
createTempDir mass-registrations $PID
echoV "\n----->	Temporary local directory created at $TMP ..." 1

# Input
TMPin=${TMP}${InbName}.hdr

TMPref=${TMP}${InbName}-${RefbName}.hdr
TMPstr=${TMP}${InbName}-${StrbName}.hdr

# Output
refMask=${TMP}${InbName}-${RefbName}_mask.hdr
refMaskInSpace=${TMP}${InbName}-${RefbName}_mask_InSpace.hdr

FieldCoeff=${TMP}${InbName}-${RefbName}_affine_warp_coeff.nii.gz
JacobianField=${TMP}${InbName}-${RefbName}_affine_warp_jacobian.hdr

### Echoeing filenames
if [ "$verbose" == "1" ]
then
	echo -e "\nINPUT FILES"
	echo -e "\tInput Image			: ${input}"
	echo -e "\tReference ACPC Image		: ${ref}"
	echo -e "\tReference CBQ Image		: ${str}"

	echo -e "\nOUTPUT FILES"
	echo -e "\tDef. Registered Brain Mask	: ${dest}${InbName}-${RefbName}_mask_InSpace.nii.gz"
	echo -e "\tJacobian of the Field		: ${dest}${InbName}-${RefbName}_affine_warp_jacobian.nii.gz"

	echo -e "\nPARAMETERS"
	echo -e "\tRetain intermediate files	: `if [ "$int" == "0" ]; then echo "NO"; else echo "YES"; fi`"
	echo -e "\tTemporary Local Directory	: $TMP"
	echo -e "\tRegularization Weight		: $reg"
fi

### Importing data to the temporary directory
echo -e "\n\n"
echoV "----->	Importing required files to the temporary local directory ..." 1

import ${InExt} ${input} ${TMP}${InbName}
import ${RefExt} ${ref} ${TMPref%.hdr}
import ${StrExt} ${str} ${TMPstr%.hdr}

### Binarizing the skull mask
echoV "----->	Creating a mask of the brain from the reference, skull-stripped Image ..." 1
echoV "\n-->  3dcalc \n
	 -a ${TMPstr} \n
	 -prefix ${refMask} \n
	 -expr 'step(a)' \n
	 -verbose \n
	 -byte;"

if [ "$verbose" == "1" ]
then
	3dcalc \
	 -a ${TMPstr} \
	 -prefix ${refMask} \
	 -expr 'step(a)' \
	 -verbose \
	 -byte;
else
	3dcalc \
	 -a ${TMPstr} \
	 -prefix ${refMask} \
	 -expr 'step(a)' \
	 -byte > ${TMP}Debug.log 2>&1;
fi

checkExitCode $? "\nERROR: Binarizing of the brain mask failed!!!"

### Deformable registration from reference skull image to input skull image
echoV "----->	Performing Deformable Registration between Input and Reference Images ...\n" 1
echoV "\n-->  dramms \n
 -T ${TMPin} \n
 -S ${TMPref} \n
 -D ${FieldCoeff} \n
 -L ${refMask} \n
 -W ${refMaskInSpace} \n
 -r 0 \n
 -g $reg \n
 -J ${JacobianField} \n
 -v;"

if [ "$verbose" == "1" ]
then
	dramms \
	 -T ${TMPin} \
	 -S ${TMPref} \
	 -D ${FieldCoeff} \
	 -L ${refMask} \
	 -W ${refMaskInSpace} \
	 -r 0 \
	 -g $reg \
	 -J ${JacobianField} \
	 -v;
else
	dramms \
	 -T ${TMPin} \
	 -S ${TMPref} \
	 -D ${FieldCoeff} \
	 -L ${refMask} \
	 -W ${refMaskInSpace} \
	 -r 0 \
	 -g $reg \
	 -J ${JacobianField};
fi

checkExitCode $? "\nERROR: Deformable Registration failed!!!"

### Removing temporary files
if [ "$int" == 0 ] || [ "$int" == 1 ]
then
	echoV "----->	Removing temporary files ..." 1
	rmV ${TMPref} 
	rmV ${TMPref%.hdr}.img
	rmV ${TMPstr} 
	rmV ${TMPstr%.hdr}.img
	rmV ${TMPrefres} 
	rmV ${TMPrefres%.hdr}.img
	rmV ${TMPstrres} 
	rmV ${TMPstrres%.hdr}.img
	rmV ${TMPin} 
	rmV ${TMPin%.hdr}.img

	rmV ${FieldCoeff}
	rmV ${TMP}Debug.log
else
	echoV "----->	Compressing the temporary files ..." 1
	convertToNifti ${TMPref%.hdr}.img
	convertToNifti ${TMPstr%.hdr}.img
	convertToNifti ${TMPin%.hdr}.img

fi

### Compressing the final results
echoV "----->	Compressing the final results ..." 1

convertToNifti ${refMask%.hdr}.img
convertToNifti ${refMaskInSpace%.hdr}.img
convertToNifti ${JacobianField%.hdr}.img

if [ "$vnmask" == "1" ]
then
	convertToNifti ${vnMaskInSpace%.hdr}.img
fi

### Moving the results to the destination directory
echoV "----->	Moving the results to the destination directory ..." 1
if [ "$verbose" == "1" ]
then
	if [ ! -d ${dest} ]
	then
		mkdir -pv $dest
	fi

	mv -v ${TMP}* ${dest}
	rmdir -v $TMP
else
	if [ ! -d ${dest} ]
	then
		mkdir -p $dest
	fi

	mv ${TMP}* ${dest}
	rmdir $TMP
fi

### Execution Time 
executionTime

################################################ END ################################################
