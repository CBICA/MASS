#!/bin/bash

. @BASH_LIBRARY_DIR@/mass-functions.sh || { echo "Failed to source MASS functions!" 1>&2; exit 1; }

################################################ VERSION INFO ################################################
# $Id: ChooseTemplates.sh 170 2013-09-20 14:44:15Z hsiehm@UPHS.PENNHEALTH.PRV $
#
version()
{
	# Display the version number and date of modification extracted from
	# the Id variable.
	SVNversion="$Id: ChooseTemplates.sh 170 2013-09-20 14:44:15Z hsiehm@UPHS.PENNHEALTH.PRV $"
	Auth="Jimit Doshi"
	ver="$Rev: 170 $"
	mod="$LastChangedDate: 2013-09-20 10:44:15 -0400 (Fri, 20 Sep 2013) $"
	echo -e "Author			: $Auth"
	echo -e "Revision		$ver"
	echo -e "Last Modification	$mod"
#	echo -e "$0 version \c"
#	echo $SVNversion|cut -f3,4,5 -d" "
	exit 5
}

################################################ FUNCTIONS ################################################

help()
{
cat <<HELP

This script does the following:

	This script accepts a list of images as input and uses k-means clustering approach
	to find the centroids of different clusters and returns those images as an output.
	
	This script can be used to select images from your dataset that represents the
	variance in your dataset and therefore, could be used as Templates in performing
	the skull-stripping operation.

##############################################
USAGE :	$0 [OPTIONS]
OPTIONS:

Reqd:	-list	  < file >	absolute path to the file list containing all of 
				the input files (with full path) to be clustered
	 
Opt:	-clust	  < int  >	Number of templates to be chosen (default: 6)
	-dest	  < path >	absolute path to the destination where the results are to be stored 
				(default: same as input)
	-pref	  < prefix >	prefix for the output list containing the chosen templates
				(default: ChosenTemplates_"date +%F-%H%M%S".txt)
	-tmp	  < path >	absolute path to the temporary directory
	-v			verbose output (default: no output)
	-a	  		flag indicating the the input files are affinely registered
	-MT	  < int  >	an integer value indicating the number of threads to use for 
				parallel processing (default: 1)
	-V			Version information
	-h         		this help page

Examples:

	mass-chooseTemplates -list /path/to/list/of/images.lst
		To select 6 cluster-centers from the provided input list

	mass-chooseTemplates -list /path/to/list/of/images.lst -clust 15
		To select 15 cluster-centers from the provided input list
  
	mass-chooseTemplates -list /path/to/list/of/images.lst -clust 15 -MT 6
		To select 15 cluster-centers from the provided input list and use 6 CPU cores to speed
		up the processing
  
  	mass-chooseTemplates -list /path/to/list/of/images.lst -clust 15 -a
  		If you have already affinely registered all input images so they are in the same space,
  		you can specify that by using the -a option. Here, you do not need the -MT option 
  		as all images have already been registered

	Additionally, you can also submit this script to your computing cluster (using appropriate options) 
	if you have a large number of images that need be clustered.
	
ERROR: Not enough arguments!!
##############################################

DEPENDENCIES:
	nifti1_test		: `which nifti1_test`
	flirt			: `which flirt`
HELP
exit 1
}

cleanUpandExit()
{
	echo -e ":o:o:o:o:o Aborting Operations .... \n\n"
	
	if [ -d $TMP ]
	then
		BGjobs=`jobs -p`
		if [ -n "$BGjobs" ]
		then
			kill -s SIGINT $BGjobs
		fi

		rm -rfv ${TMP}
		rm -rfv ${TMP}
		rmdir -pv $TMP
		rmdir -pv $TMPDIR
	fi
	
	executionTime
	
	exit 1
}

parse()
{
	while [ -n "$1" ]; do
		case $1 in
			-h) 
				help;
				shift 1;;			# help is called
		     	-list) 
				list=$2;
				shift 2;;			# SubID is set
			-dest) 
				dest=`checkPath $2`;
				shift 2;;			# source path is set
			-tmp) 
				tmpDirToUse=`checkPath $2`;
				shift 2;;			# source path is set
			-clust) 
				clust=$2;
				shift 2;;			# source path is set
			-pref) 
				pref=$2;
				shift 2;;			# source path is set
			-v) 
				verbose=1;
				shift 1;;			# source path is set
			-a) 
				affine=1;
				shift 1;;			# source path is set
			-V) 
				version;
				shift 1;;			# source path is set
			-MT) 
				MT=$2;
				shift 2;;			# source path is set
			-*) 
				echo "ERROR: no such option $1";
				help;;
			 *) 
				break;;
		esac
	done
}

import()
{
	ext=$1
	inFile=$2
	outFile=$3
	
	if [ "${ext}" == "nii.gz" ] || [ "${ext}" == "nii" ] || [ "${ext}" == "hdr" ]
	then
		3dcalc \
		 -prefix ${outFile}.nii \
		 -a ${inFile} \
		 -expr a \
		 -verbose \
		 -byte \
		 -nscale > ${TMP}ConversionToByte_${PID}.log 2>&1 || { checkExitCode 1 "\nERROR: File import for ${inFile} failed!!!"; }
	elif [ "${ext}" == "img" ]
	then
		3dcalc \
		 -prefix ${outFile}.nii \
		 -a ${inFile%.img}.hdr \
		 -expr a \
		 -verbose \
		 -byte \
		 -nscale > ${TMP}ConversionToByte_${PID}.log 2>&1 || { checkExitCode 1 "\nERROR: File import for ${inFile} failed!!!"; }
	fi
}

resample()
{
	ext=$1
	inFile=$2
	outFile=$3
	
	if [ "${ext}" == "nii.gz" ] || [ "${ext}" == "nii" ] || [ "${ext}" == "hdr" ]
	then
		3dresample \
		 -dxyz 2 2 2 \
		 -orient RAI \
		 -rmode Li \
		 -prefix ${outFile}.nii.gz \
		 -inset ${inFile} > ${TMP}ResampleImages_${PID}.log 2>&1 || { checkExitCode 1 "\nERROR: Resampling for ${inFile} failed!!!"; }
	elif [ "${ext}" == "img" ]
	then
		3dresample \
		 -dxyz 2 2 2 \
		 -orient RAI \
		 -rmode Li \
		 -prefix ${outFile}.nii.gz \
		 -inset ${inFile%.img}.hdr > ${TMP}ResampleImages_${PID}.log 2>&1 || { checkExitCode 1 "\nERROR: Resampling for ${inFile} failed!!!"; }
	fi

}

################################################ END OF FUNCTIONS ################################################

################################################ MAIN BODY ################################################

if [ $# -lt 1 ]; then
	help
fi

### Timestamps
startTime=`date +%F-%H:%M:%S`
startTimeStamp=`date +%s`


### Default parameters
int=0
verbose=1
affine=0
clust=6
MT=1
scripts=@LIBEXEC_DIR@/
pref=ChosenTemplates_`date +%F-%H%M%S`.txt

### Scripts and environment variables
FSLOUTPUTTYPE=NIFTI; export $FSLOUTPUTTYPE

### Specifying the trap signal
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGHUP signal'" SIGHUP 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGINT signal'" SIGINT 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGTERM signal'" SIGTERM 
trap "checkExitCode 1 '\nProgram Interrupted. Received SIGKILL signal'" SIGKILL

### Check if all dependenices are satisfied
checkDependency	nifti1_test
checkDependency	flirt
checkDependency	3dresample
checkDependency	3dcalc

### Reading the arguments
parse $*

echo -e "\nRunning commands on		: `hostname`"
echo -e "Start time			: ${startTime}\n"

### Checking parameter validity
# Checking if destination was provided, if not, same as input file
if [ -z "$dest" ]
then
	dest=`dirname $list`/
fi

if [ -z "$list" ]
then
	echo -e "\nNo file list provided! Please use option -list to provide a file list from which the templates are to be chosen"
	echo -e ":o:o:o:o:o Aborting Operations .... \n\n"
	exit 1
fi

if [ ! -f "$list" ]
then
	echo -e "\nInput file list $list does not exist. Please check!"
	echo -e ":o:o:o:o:o Aborting Operations .... \n\n"
	exit 1
fi

### Forming FileNames
PID=$$

### Creating temporary directory
createTempDir mass-chooseTemplates $PID
echoV "\n----->	Temporary local directory created at $TMP ..." 1

### Resampling the images to 2:2:2
i=0
FileCount=`wc -l $list | awk '{ print $1 }'`

echoV "\n----->	Importing the input files and resampling them to voxel dimensions 2:2:2 for faster processing ...\n"
while read line
do
	# Check if the file exists
	checkFile $line
	
	# Get attributes
	temp=`FileAtt $line`				
	FileExt=`echo $temp | awk '{ print $1 }'`
	FilebName=`echo $temp | awk '{ print $2 }'`
	FileDir=`echo $temp | awk '{ print $3 }'`
	
	line=${FileDir}/${FilebName}.${FileExt}

	if [ $MT == "1" ]
	then
		i=`echo "scale=0; $i + 1" | bc`
		echoV "\t-->	Resampling $i/$FileCount images ..."

		resample ${FileExt} ${line} ${TMP}${FilebName}_res222
	else
		### Allows for control over the number of jobs running in the background
		BGjobsNum=`jobs -p | wc -l`
		while [ $BGjobsNum -ge $MT ]
		do
			sleep 1s
			BGjobsNum=`jobs -p | wc -l`
		done
		
		i=`echo "scale=0; $i + 1" | bc`
		echoV "\t-->	Resampling $i/$FileCount images ..."

		resample ${FileExt} ${line} ${TMP}${FilebName}_res222 &
	fi
	
done < $list

BGjobs=`jobs -p`
wait $BGjobs

while read line
do
	temp=`FileAtt $line`				
	FileExt=`echo $temp | awk '{ print $1 }'`
	FilebName=`echo $temp | awk '{ print $2 }'`

	if [ ! -f ${TMP}${FilebName}_res222.nii.gz ]
	then
		checkExitCode 1 "\nERROR: Resampling for $line failed!!!"
	else
		ls -1 ${TMP}${FilebName}_res222.nii.gz >> ${TMP}TempResampledList.txt
	fi
done < $list


i=0
FileCount=`wc -l $list | awk '{ print $1 }'`
Templates=${dest}${pref}

### Adjusting Image dimensions for all input files
if [ "$affine" == "0" ]
then
	# Importing files
	echoV "\n----->	Importing the input files and affinely (12 dof) registering to the first image in the list ...\n"

	RefFile=`cat ${TMP}TempResampledList.txt | head -1`
	
	while read line
	do
		temp=`FileAtt $line`				
		FileExt=`echo $temp | awk '{ print $1 }'`
		FilebName=`echo $temp | awk '{ print $2 }'`

		
		if [ $MT == "1" ]
		then
			i=`echo "scale=0; $i + 1" | bc`
			echoV "\t-->	Affinely registering image $i/$FileCount ..."

			flirt \
			 -in $line \
			 -ref $RefFile \
			 -out ${TMP}${FilebName}_adj.nii \
			 -dof 12 \
			 -datatype int \
			 -v >> ${TMP}AffineRegistration_${PID}.log 2>&1;
		else
			### Allows for control over the number of jobs running in the background
			BGjobsNum=`jobs -p | wc -l`
			while [ $BGjobsNum -ge $MT ]
			do
				sleep 1s
				BGjobsNum=`jobs -p | wc -l`
			done

			i=`echo "scale=0; $i + 1" | bc`
			echoV "\t-->	Affinely registering image $i/$FileCount ..."

			flirt \
			 -in $line \
			 -ref $RefFile \
			 -out ${TMP}${FilebName}_adj.nii \
			 -dof 12 \
			 -datatype int \
			 -v >> ${TMP}AffineRegistration_${PID}.log 2>&1 &
		fi
			
	done < ${TMP}TempResampledList.txt
	
	BGjobs=`jobs -p`
	wait $BGjobs

	while read line
	do
		temp=`FileAtt $line`				
		FileExt=`echo $temp | awk '{ print $1 }'`
		FilebName=`echo $temp | awk '{ print $2 }'`

		if [ ! -f ${TMP}${FilebName}_adj.nii ]
		then
			checkExitCode 1 "\nERROR: Affine registration for $line failed!!!"
		else
			ls -1 ${TMP}${FilebName}_adj.nii >> ${TMP}TempAdjList.txt
		fi
	done < ${TMP}TempResampledList.txt

else
	echoV "\n----->	Importing the input files and converting them to byte ...\n"
	while read line
	do
		temp=`FileAtt $line`				
		FileExt=`echo $temp | awk '{ print $1 }'`
		FilebName=`echo $temp | awk '{ print $2 }'`

		if [ $MT == "1" ]
		then
			i=`echo "scale=0; $i + 1" | bc`
			echoV "\t-->	Importing $i/$FileCount images ..."

			import ${FileExt} ${line} ${TMP}${FilebName}_adj
		else
			### Allows for control over the number of jobs running in the background
			BGjobsNum=`jobs -p | wc -l`
			while [ $BGjobsNum -ge $MT ]
			do
				sleep 1s
				BGjobsNum=`jobs -p | wc -l`
			done

			i=`echo "scale=0; $i + 1" | bc`
			echoV "\t-->	Importing $i/$FileCount images ..."

			import ${FileExt} ${line} ${TMP}${FilebName}_adj &
		fi
		
	done < ${TMP}TempResampledList.txt
	
	BGjobs=`jobs -p`
	wait $BGjobs

	while read line
	do
		temp=`FileAtt $line`				
		FileExt=`echo $temp | awk '{ print $1 }'`
		FilebName=`echo $temp | awk '{ print $2 }'`

		if [ ! -f ${TMP}${FilebName}_adj.nii ]
		then
			checkExitCode 1 "\nERROR: Conversion to byte for $line failed!!!"
		else
			ls -1 ${TMP}${FilebName}_adj.nii >> ${TMP}TempAdjList.txt
		fi
	done < ${TMP}TempResampledList.txt

fi

### Importing data to the temporary directory
#ls -1 ${TMP}*_adj.nii > ${TMP}TempAdjList.txt

### Clusterizing Input files, finally
echoV "\n----->	Clustering the Input files ...\n"

echoV "\n-->  python \n
	 ${scripts}mass-choosetemplate \n
	 ${clust} \n
	 ${TMP}TempAdjList.txt \n
	 ${TMP} > ${TMP}choosetemplate.log \n
	 $MT;"

python \
 ${scripts}mass-choosetemplate \
 ${clust} \
 ${TMP}TempAdjList.txt \
 ${TMP} \
 ${MT} > ${TMP}choosetemplate.log 2>&1 || { checkExitCode 1 "\nERROR: Execution of choosetemplate failed!!!"; }

### Write an output list with the templates and their original basenames and extensions
if [ ! -d $dest ]
then
	mkdir -p $dest
fi

echoV "\n----->	Writing a template list ...\n"
while read line
do
	grep -w "`basename ${line%_res222_adj.nii}`" $list >> ${Templates}
done < ${TMP}templatelist.txt

echoV "Writing the list of selected templates to ${Templates} ..."
echoV "Chose `cat ${Templates} | wc -l` images as templates out of a total of $i images ...\n"


### Removing temporary files

for l in ${TMP}TempAdjList.txt ${TMP}TempResampledList.txt
do
	while read line
	do
		rm -fv $line
	done < $l
done

rm -fv ${TMP}TempAdjList.txt
rm -fv ${TMP}TempResampledList.txt
rm -fv ${TMP}templatelist.txt
rm -fv ${TMP}choosetemplate.log
rm -fv ${TMP}AdjustSizeBoundingBox_${PID}.log
rm -fv ${TMP}AffineRegistration_${PID}.log
rm -fv ${TMP}ConversionToByte_${PID}.log
rm -fv ${TMP}ResampleImages_${PID}.log

for (( i=0;i<=${clust};i++ ))
do
	rm -fv ${TMP}list${i}.txt
#	mv -v ${TMP}list${i}.txt ${dest}
done

rmdir -pv ${TMP}
rmdir -pv $TMPDIR

### Execution Time 
executionTime

################################################ END ################################################
